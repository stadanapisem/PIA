package database;
// Generated Jun 7, 2017 5:07:06 PM by Hibernate Tools 4.3.1

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.Query;
import org.hibernate.Transaction;
import util.NewHibernateUtil;

/**
 * Message generated by hbm2java
 */
@Entity
@Table(name = "message",
         catalog = "projekat"
)
public class Message implements java.io.Serializable {

    private Integer mid;
    private User userByUdi2;
    private User userByUid1;
    private String text;
    private Date time;

    public static List<Integer> getAllMessagesForUser(User u) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        List<Integer> ret = new ArrayList<>();

        try {
            tx = session.beginTransaction();
            Query query = session.createSQLQuery("SELECT mid FROM Message WHERE uid1 = :uid OR udi2 = :uid ORDER BY time DESC");
            query.setParameter("uid", u.getUid());
            
            ret = query.list();
            
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public static Message getMessageById(Integer mid) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        Message ret = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createQuery("FROM Message M WHERE M.mid = :mid");
            query.setParameter("mid", mid);
            
            List<Message> res = query.list();
            if(res != null && res.size() > 0)
                ret = res.get(0);
            
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public Message() {
    }

    public Message(User userByUdi2, User userByUid1, String text, Date time) {
        this.userByUdi2 = userByUdi2;
        this.userByUid1 = userByUid1;
        this.text = text;
        this.time = time;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "mid", unique = true, nullable = false)
    public Integer getMid() {
        return this.mid;
    }

    public void setMid(Integer mid) {
        this.mid = mid;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "udi2", nullable = false)
    public User getUserByUdi2() {
        return this.userByUdi2;
    }

    public void setUserByUdi2(User userByUdi2) {
        this.userByUdi2 = userByUdi2;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "uid1", nullable = false)
    public User getUserByUid1() {
        return this.userByUid1;
    }

    public void setUserByUid1(User userByUid1) {
        this.userByUid1 = userByUid1;
    }

    @Column(name = "text", nullable = false, length = 65535)
    public String getText() {
        return this.text;
    }

    public void setText(String text) {
        this.text = text;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "time", nullable = false, length = 19)
    public Date getTime() {
        return this.time;
    }

    public void setTime(Date time) {
        this.time = time;
    }

}
