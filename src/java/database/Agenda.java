package database;
// Generated Jun 7, 2017 5:07:06 PM by Hibernate Tools 4.3.1

import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.Query;
import org.hibernate.Transaction;
import util.NewHibernateUtil;

/**
 * Agenda generated by hbm2java
 */
@Entity
@Table(name = "agenda",
        catalog = "projekat",
        uniqueConstraints = @UniqueConstraint(columnNames = {"uid", "eid"})
)
public class Agenda implements java.io.Serializable {

    private Integer agid;
    private Event event;
    private User user;

    @Override
    public boolean equals(Object object) {
        boolean isEqual = false;

        if (object != null && object instanceof Agenda) {
            isEqual = (this.agid == ((Agenda) object).agid);
        }

        return isEqual;
    }

    @Override
    public int hashCode() {
        return this.agid;
    }

    public static boolean isEventInMyAgenda(Event ev, User u) {
        boolean ret = false;
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createQuery("FROM Agenda A WHERE A.user = :user AND A.event = :event");
            query.setParameter("user", u);
            query.setParameter("event", ev);
            
            List<Agenda> ag = query.list();
            
            if(ag != null && ag.size() > 0)
                ret = true;

            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public static boolean addEventForUser(Agenda ag) {
        boolean ret = false;
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            session.save(ag);
            tx.commit();
            ret = true;
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }

    public static List<Agenda> getMyAgenda(User u) {
        List<Agenda> ag = null;
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createQuery("FROM Agenda A WHERE A.user = :user");
            query.setParameter("user", u);
            ag = query.list();

            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ag;
    }

    public static List<User> allUsersForConference(Conference c) {
        List<User> u = null;
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createQuery("FROM Agenda A, Event E, Programme P WHERE A.eid = E.eid AND E.eid = P.eid AND P.cid = :cid");
            query.setParameter("cid", c.getCid());
            u = query.list();

            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return u;
    }

    public static List<Integer> allConferencesForUser(User u) {
        List<Integer> conf = null;
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            //Query query = session.createQuery("FROM Conference C, Agenda A, Event E, Programme P WHERE A.uid = :uid AND A.eid = E.eid AND P.eid = E.eid AND P.cid = C.cid GROUP By C.cid");
            Query query = session.createSQLQuery("SELECT DISTINCT(C.cid) FROM Conference C, Agenda A, Event E, Programme P WHERE A.edi = E.edi AND E.edi = P.edi AND P.cid = C.cid ");
            //query.setParameter("uid", u.getUid());
            conf = query.list();

            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return conf;
    }

    public Agenda() {
    }

    public Agenda(Event event, User user) {
        this.event = event;
        this.user = user;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "agid", unique = true, nullable = false)
    public Integer getAgid() {
        return this.agid;
    }

    public void setAgid(Integer agid) {
        this.agid = agid;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "eid", nullable = false)
    public Event getEvent() {
        return this.event;
    }

    public void setEvent(Event event) {
        this.event = event;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "uid", nullable = false)
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

}
