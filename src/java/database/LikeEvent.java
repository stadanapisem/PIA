package database;
// Generated Jun 7, 2017 5:07:06 PM by Hibernate Tools 4.3.1

import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.Query;
import org.hibernate.Transaction;
import util.NewHibernateUtil;

/**
 * LikeEvent generated by hbm2java
 */
@Entity
@Table(name = "like_event",
         catalog = "projekat",
         uniqueConstraints = @UniqueConstraint(columnNames = {"eid", "uid"})
)
public class LikeEvent implements java.io.Serializable {

    private Integer leid;
    private Event event;
    private User user;
    
    public static boolean deleteLike(LikeEvent ev) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        boolean ret = false;

        try {
            tx = session.beginTransaction();
            session.delete(ev);
            tx.commit();
            ret = true;
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }

    public static LikeEvent getLikeForUserAndEvent(User u, Event ev) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        LikeEvent ret = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createQuery("FROM LikeEvent E WHERE E.user = :user AND E.event = :event");
            query.setParameter("user", u);
            query.setParameter("event", ev);
            
            List<LikeEvent> res = query.list();
            
            if(res != null && res.size() > 0)
                ret = res.get(0);
            
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public static boolean addLike(LikeEvent l) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        boolean ret = false;

        try {
            tx = session.beginTransaction();
            session.save(l);
            tx.commit();
            ret = true;
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public LikeEvent() {
    }

    public LikeEvent(Event event, User user) {
        this.event = event;
        this.user = user;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "leid", unique = true, nullable = false)
    public Integer getLeid() {
        return this.leid;
    }

    public void setLeid(Integer leid) {
        this.leid = leid;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "eid", nullable = false)
    public Event getEvent() {
        return this.event;
    }

    public void setEvent(Event event) {
        this.event = event;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "uid", nullable = false)
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

}
