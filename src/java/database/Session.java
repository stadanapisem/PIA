package database;
// Generated Jun 7, 2017 5:07:06 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import org.hibernate.Query;
import org.hibernate.Transaction;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import util.NewHibernateUtil;

/**
 * Session generated by hbm2java
 */
@Entity
@Table(name = "session",
         catalog = "projekat"
)
public class Session implements java.io.Serializable {

    private int eid;
    private Event event;
    private Hall hall;
    private String title;
    private Set<Lecture> lectures = new HashSet<Lecture>(0);

    public static boolean addSession(Session c) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        boolean ret = false;

        try {
            tx = session.beginTransaction();
            session.save(c);
            tx.commit();
            ret = true;
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public static List<Integer> getSessionsForConference(Conference c) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        List<Integer> ret = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createSQLQuery("SELECT DISTINCT(S.eid) FROM Session s, Conference c, Programme p WHERE s.eid = p.eid AND p.cid = :cid");
            query.setParameter("cid", c.getCid());
            ret = query.list();
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public static Session getSessionsById(Integer id) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        Session ret = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createQuery("FROM Session S WHERE S.eid = :eid");
            query.setParameter("eid", id);
            List<Session> result = query.list();

            if(result != null && result.size() > 0)
                ret = result.get(0);
                
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }
    
    public Session() {
    }

    public Session(Event event, Hall hall, String title) {
        this.event = event;
        this.hall = hall;
        this.title = title;
    }

    public Session(Event event, Hall hall, String title, Set<Lecture> lectures) {
        this.event = event;
        this.hall = hall;
        this.title = title;
        this.lectures = lectures;
    }

    @GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "event"))
    @Id
    @GeneratedValue(generator = "generator")

    @Column(name = "eid", unique = true, nullable = false)
    public int getEid() {
        return this.eid;
    }

    public void setEid(int eid) {
        this.eid = eid;
    }

    @OneToOne(fetch = FetchType.LAZY)
    @PrimaryKeyJoinColumn
    public Event getEvent() {
        return this.event;
    }

    public void setEvent(Event event) {
        this.event = event;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "hid", nullable = false)
    public Hall getHall() {
        return this.hall;
    }

    public void setHall(Hall hall) {
        this.hall = hall;
    }

    @Column(name = "title", nullable = false, length = 100)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "session")
    public Set<Lecture> getLectures() {
        return this.lectures;
    }

    public void setLectures(Set<Lecture> lectures) {
        this.lectures = lectures;
    }

}
