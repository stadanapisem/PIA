package database;
// Generated Jun 7, 2017 5:07:06 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.Query;
import org.hibernate.Transaction;
import util.NewHibernateUtil;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user",
        catalog = "projekat",
        uniqueConstraints = {
            @UniqueConstraint(columnNames = "email")
            , @UniqueConstraint(columnNames = "username")}
)
public class User implements java.io.Serializable {

    public static boolean checkExistance(String username) {
        boolean ret = false;
        try {
            org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
            Transaction tx = session.beginTransaction();
            Query query = session.createQuery("FROM User E WHERE E.username = :username");
            query.setParameter("username", username);
            List results = query.list();
            if(results.size() > 0)
                ret = false;
            else ret = true;
            tx.commit();
            session.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return ret;
    }

    private Integer uid;
    private String username;
    private String password;
    private String salt;
    private int iterations;
    private String name;
    private String surname;
    private String email;
    private String institution;
    private Byte gender;
    private String profilePicture;
    private String shirtSize;
    private String linkedin;
    private byte type;
    private Set<Grade> grades = new HashSet<Grade>(0);
    private Set<Comment> comments = new HashSet<Comment>(0);
    private Set<LikeEvent> likeEvents = new HashSet<LikeEvent>(0);
    private Set<Agenda> agendas = new HashSet<Agenda>(0);
    private Set<Message> messagesForUdi2 = new HashSet<Message>(0);
    private Set<Message> messagesForUid1 = new HashSet<Message>(0);
    private Set<Moderator> moderators = new HashSet<Moderator>(0);
    private Set<Favourites> favouritesesForUid2 = new HashSet<Favourites>(0);
    private Set<Favourites> favouritesesForUid1 = new HashSet<Favourites>(0);

    public User() {
    }

    public User(String username, String password, String salt, int iterations, String name, String surname, String email, String institution, byte type) {
        this.username = username;
        this.password = password;
        this.salt = salt;
        this.iterations = iterations;
        this.name = name;
        this.surname = surname;
        this.email = email;
        this.institution = institution;
        this.type = type;
    }

    public User(String username, String password, String salt, int iterations, String name, String surname, String email, String institution, Byte gender, String profilePicture, String shirtSize, String linkedin, byte type, Set<Grade> grades, Set<Comment> comments, Set<LikeEvent> likeEvents, Set<Agenda> agendas, Set<Message> messagesForUdi2, Set<Message> messagesForUid1, Set<Moderator> moderators, Set<Favourites> favouritesesForUid2, Set<Favourites> favouritesesForUid1) {
        this.username = username;
        this.password = password;
        this.salt = salt;
        this.iterations = iterations;
        this.name = name;
        this.surname = surname;
        this.email = email;
        this.institution = institution;
        this.gender = gender;
        this.profilePicture = profilePicture;
        this.shirtSize = shirtSize;
        this.linkedin = linkedin;
        this.type = type;
        this.grades = grades;
        this.comments = comments;
        this.likeEvents = likeEvents;
        this.agendas = agendas;
        this.messagesForUdi2 = messagesForUdi2;
        this.messagesForUid1 = messagesForUid1;
        this.moderators = moderators;
        this.favouritesesForUid2 = favouritesesForUid2;
        this.favouritesesForUid1 = favouritesesForUid1;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "uid", unique = true, nullable = false)
    public Integer getUid() {
        return this.uid;
    }

    public void setUid(Integer uid) {
        this.uid = uid;
    }

    @Column(name = "username", unique = true, nullable = false, length = 50)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "password", nullable = false, length = 100)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "salt", nullable = false, length = 16)
    public String getSalt() {
        return this.salt;
    }

    public void setSalt(String salt) {
        this.salt = salt;
    }

    @Column(name = "iterations", nullable = false)
    public int getIterations() {
        return this.iterations;
    }

    public void setIterations(int iterations) {
        this.iterations = iterations;
    }

    @Column(name = "name", nullable = false, length = 30)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "surname", nullable = false, length = 30)
    public String getSurname() {
        return this.surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    @Column(name = "email", unique = true, nullable = false, length = 50)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "institution", nullable = false, length = 50)
    public String getInstitution() {
        return this.institution;
    }

    public void setInstitution(String institution) {
        this.institution = institution;
    }

    @Column(name = "gender")
    public Byte getGender() {
        return this.gender;
    }

    public void setGender(Byte gender) {
        this.gender = gender;
    }

    @Column(name = "profile_picture", length = 300)
    public String getProfilePicture() {
        return this.profilePicture;
    }

    public void setProfilePicture(String profilePicture) {
        this.profilePicture = profilePicture;
    }

    @Column(name = "shirt_size", length = 3)
    public String getShirtSize() {
        return this.shirtSize;
    }

    public void setShirtSize(String shirtSize) {
        this.shirtSize = shirtSize;
    }

    @Column(name = "linkedin", length = 100)
    public String getLinkedin() {
        return this.linkedin;
    }

    public void setLinkedin(String linkedin) {
        this.linkedin = linkedin;
    }

    @Column(name = "type", nullable = false)
    public byte getType() {
        return this.type;
    }

    public void setType(byte type) {
        this.type = type;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<Grade> getGrades() {
        return this.grades;
    }

    public void setGrades(Set<Grade> grades) {
        this.grades = grades;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<Comment> getComments() {
        return this.comments;
    }

    public void setComments(Set<Comment> comments) {
        this.comments = comments;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<LikeEvent> getLikeEvents() {
        return this.likeEvents;
    }

    public void setLikeEvents(Set<LikeEvent> likeEvents) {
        this.likeEvents = likeEvents;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<Agenda> getAgendas() {
        return this.agendas;
    }

    public void setAgendas(Set<Agenda> agendas) {
        this.agendas = agendas;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUdi2")
    public Set<Message> getMessagesForUdi2() {
        return this.messagesForUdi2;
    }

    public void setMessagesForUdi2(Set<Message> messagesForUdi2) {
        this.messagesForUdi2 = messagesForUdi2;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUid1")
    public Set<Message> getMessagesForUid1() {
        return this.messagesForUid1;
    }

    public void setMessagesForUid1(Set<Message> messagesForUid1) {
        this.messagesForUid1 = messagesForUid1;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<Moderator> getModerators() {
        return this.moderators;
    }

    public void setModerators(Set<Moderator> moderators) {
        this.moderators = moderators;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUid2")
    public Set<Favourites> getFavouritesesForUid2() {
        return this.favouritesesForUid2;
    }

    public void setFavouritesesForUid2(Set<Favourites> favouritesesForUid2) {
        this.favouritesesForUid2 = favouritesesForUid2;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUid1")
    public Set<Favourites> getFavouritesesForUid1() {
        return this.favouritesesForUid1;
    }

    public void setFavouritesesForUid1(Set<Favourites> favouritesesForUid1) {
        this.favouritesesForUid1 = favouritesesForUid1;
    }

}
