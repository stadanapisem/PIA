package database;
// Generated Jun 7, 2017 5:07:06 PM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.Query;
import org.hibernate.Transaction;
import util.NewHibernateUtil;

/**
 * Event generated by hbm2java
 */
@Entity
@Table(name = "event",
         catalog = "projekat"
)
public class Event implements java.io.Serializable {

    private Integer eid;
    private int day;
    private Date startTime;
    private Set<LikeEvent> likeEvents = new HashSet<LikeEvent>(0);
    private Set<Photo> photos = new HashSet<Photo>(0);
    private Session session;
    private Set<Agenda> agendas = new HashSet<Agenda>(0);
    private Set<Comment> comments = new HashSet<Comment>(0);
    private Ceremony ceremony;
    private Workshop workshop;
    private Set<Programme> programmes = new HashSet<Programme>(0);

    public static List<Event> getAllEventsForConference(Conference c) {
        List<Event> ev = null;
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            Query query = session.createQuery("FROM Event E, Programme P WHERE E.eid = P.eid AND P.cid = :cid");
            query.setParameter("cid", c.getCid());
            ev = query.list();

            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        }

        return ev;
    }
    
    public static boolean addEvent(Event c) {
        org.hibernate.Session session = NewHibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        boolean ret = false;

        try {
            tx = session.beginTransaction();
            session.save(c);
            tx.commit();
            ret = true;
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }

        return ret;
    }

    public Event() {
    }

    public Event(int day, Date startTime) {
        this.day = day;
        this.startTime = startTime;
    }

    public Event(int day, Date startTime, Set<LikeEvent> likeEvents, Set<Photo> photos, Session session, Set<Agenda> agendas, Set<Comment> comments, Ceremony ceremony, Workshop workshop, Set<Programme> programmes) {
        this.day = day;
        this.startTime = startTime;
        this.likeEvents = likeEvents;
        this.photos = photos;
        this.session = session;
        this.agendas = agendas;
        this.comments = comments;
        this.ceremony = ceremony;
        this.workshop = workshop;
        this.programmes = programmes;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "eid", unique = true, nullable = false)
    public Integer getEid() {
        return this.eid;
    }

    public void setEid(Integer eid) {
        this.eid = eid;
    }

    @Column(name = "day", nullable = false)
    public int getDay() {
        return this.day;
    }

    public void setDay(int day) {
        this.day = day;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "start_time", nullable = false, length = 19)
    public Date getStartTime() {
        return this.startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
    public Set<LikeEvent> getLikeEvents() {
        return this.likeEvents;
    }

    public void setLikeEvents(Set<LikeEvent> likeEvents) {
        this.likeEvents = likeEvents;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
    public Set<Photo> getPhotos() {
        return this.photos;
    }

    public void setPhotos(Set<Photo> photos) {
        this.photos = photos;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "event")
    public Session getSession() {
        return this.session;
    }

    public void setSession(Session session) {
        this.session = session;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
    public Set<Agenda> getAgendas() {
        return this.agendas;
    }

    public void setAgendas(Set<Agenda> agendas) {
        this.agendas = agendas;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
    public Set<Comment> getComments() {
        return this.comments;
    }

    public void setComments(Set<Comment> comments) {
        this.comments = comments;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "event")
    public Ceremony getCeremony() {
        return this.ceremony;
    }

    public void setCeremony(Ceremony ceremony) {
        this.ceremony = ceremony;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "event")
    public Workshop getWorkshop() {
        return this.workshop;
    }

    public void setWorkshop(Workshop workshop) {
        this.workshop = workshop;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
    public Set<Programme> getProgrammes() {
        return this.programmes;
    }

    public void setProgrammes(Set<Programme> programmes) {
        this.programmes = programmes;
    }

}
